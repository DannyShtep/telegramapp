"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { useTelegram } from "../hooks/useTelegram"
import type { TelegramUser } from "../types/telegram"
import { createClientComponentClient } from "@/lib/supabase"
import { getOrCreateRoom, addPlayerToRoom, updateRoomState, getPlayersInRoom, ensureUserOnline } from "@/app/actions"

interface Player {
  id: string // UUID –∏–∑ Supabase
  telegramId: number
  username: string
  displayName: string
  avatar: string
  gifts: number
  tonValue: number
  color: string
  percentage: number
  isParticipant: boolean
}

interface RoomState {
  id: string // UUID –∫–æ–º–Ω–∞—Ç—ã
  status: "waiting" | "single_player" | "countdown" | "spinning" | "finished"
  countdown: number
  winner_telegram_id: number | null
  total_gifts: number
  total_ton: number
}

const items = [
  { icon: "üíù", label: "PvP" },
  { icon: "üîî", label: "Rolls" },
  { icon: "üë§", label: "–ú–æ–∏ –≥–∏—Ñ—Ç—ã" },
  { icon: "üè™", label: "–ú–∞–≥–∞–∑–∏–Ω" },
  { icon: "‚ö°", label: "–ó–∞—Ä–∞–±–æ—Ç–æ–∫" },
]

export default function TelegramRouletteApp() {
  const { user, isReady, hapticFeedback, getUserPhotoUrl, getUserDisplayName, showAlert } = useTelegram() // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º showAlert
  const supabase = createClientComponentClient()

  const defaultRoomId = "default-room-id" // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤ –±—É–¥—É—â–µ–º

  const [roomState, setRoomState] = useState<RoomState | null>(null)
  const [playersInRoom, setPlayersInRoom] = useState<Player[]>([]) // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
  const [rotation, setRotation] = useState(0)
  const [showWinnerModal, setShowWinnerModal] = useState(false)
  const [showPlayersModal, setShowPlayersModal] = useState(false)
  const [displayedTonAmount, setDisplayedTonAmount] = useState(Math.floor(Math.random() * 20 + 5))

  const playerColors = ["#ef4444", "#22c55e", "#3b82f6", "#f59e0b", "#8b5cf6", "#ec4899"]

  // Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏–π
  const countdownIntervalRef = useRef<NodeJS.Timeout | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–≥—Ä–æ–∫–∞ –∏–∑ TelegramUser
  const createPlayerObject = (
    telegramUser: TelegramUser,
    isParticipant: boolean,
    tonValue = 0,
    existingPlayersCount = 0,
  ): Player => {
    return {
      id: `temp_${telegramUser.id}_${Date.now()}`, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      telegramId: telegramUser.id,
      username: telegramUser.username || `user${telegramUser.id}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ fallback
      displayName: getUserDisplayName(telegramUser),
      avatar: getUserPhotoUrl(telegramUser),
      gifts: isParticipant ? 1 : 0,
      tonValue: tonValue,
      color: isParticipant ? playerColors[existingPlayersCount % playerColors.length] : "",
      percentage: 0,
      isParticipant: isParticipant,
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Realtime
  useEffect(() => {
    if (!isReady || !user || !supabase) return

    const initializeRoom = async () => {
      try {
        const { room, error } = await getOrCreateRoom(defaultRoomId)
        if (error) {
          console.error("Room initialization error:", error)
          showAlert(`Room init error: ${error}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }
        if (room) {
          setRoomState(room)
        }

        const userAvatar = getUserPhotoUrl(user)
        const userDisplayName = getUserDisplayName(user)

        // –î–æ–±–∞–≤–ª—è–µ–º showAlert –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Server Action
        showAlert(`Page: User Avatar: ${userAvatar}, Display Name: ${userDisplayName}, Username: ${user.username}`)

        const { success, error: onlineError } = await ensureUserOnline(
          defaultRoomId,
          user.id,
          user.username,
          userAvatar,
          userDisplayName,
        )

        if (onlineError) {
          console.error("Error ensuring user online:", onlineError)
          showAlert(`Ensure user online error: ${onlineError}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        } else if (success) {
          const { players, error } = await getPlayersInRoom(defaultRoomId)
          if (!error && players) {
            setPlayersInRoom(players as Player[])
          } else if (error) {
            console.error("Error fetching players:", error)
            showAlert(`Fetch players error: ${error}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          }
        }
      } catch (error: any) {
        console.error("Exception in initializeRoom:", error)
        showAlert(`Exception in initRoom: ${error.message}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      }
    }

    initializeRoom()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ rooms
    const roomSubscription = supabase
      .channel(`room:${defaultRoomId}`)
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "rooms", filter: `id=eq.${defaultRoomId}` },
        (payload) => {
          if (payload.eventType === "UPDATE" || payload.eventType === "INSERT") {
            setRoomState(payload.new as RoomState)
          }
        },
      )
      .subscribe()

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ players
    const playerSubscription = supabase
      .channel(`players_in_room:${defaultRoomId}`)
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "players", filter: `room_id=eq.${defaultRoomId}` },
        async (payload) => {
          const { players, error } = await getPlayersInRoom(defaultRoomId)
          if (error) {
            console.error("Error fetching players after realtime update:", error)
            showAlert(`Fetch players after update error: ${error}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return
          }
          setPlayersInRoom(players as Player[])
        },
      )
      .subscribe()

    return () => {
      supabase.removeChannel(roomSubscription)
      supabase.removeChannel(playerSubscription)
    }
  }, [isReady, user, supabase, getUserPhotoUrl, getUserDisplayName, showAlert]) // –î–æ–±–∞–≤–ª—è–µ–º showAlert –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // ------------------------------------------------------------------
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ç–∞–π–º–µ—Ä–∞/—Ä—É–ª–µ—Ç–∫–∏
  // ------------------------------------------------------------------
  useEffect(() => {
    if (!roomState) return

    const participants = playersInRoom.filter((p) => p.isParticipant)
    const totalTon = participants.reduce((sum, p) => sum + p.tonValue, 0)

    // –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã; –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    const playersNext = playersInRoom.map((p) => {
      const newPerc = p.isParticipant && totalTon > 0 ? (p.tonValue / totalTon) * 100 : 0
      return newPerc !== p.percentage ? { ...p, percentage: newPerc } : p
    })

    const hasPlayersChanged = playersNext.some((p, i) => p !== playersInRoom[i])
    if (hasPlayersChanged) {
      setPlayersInRoom(playersNext)
    }

    // ---------- –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞ ----------
    if (roomState.status === "countdown" && roomState.countdown > 0) {
      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current)

      countdownIntervalRef.current = setInterval(async () => {
        if (roomState.countdown <= 0) return

        const newCountdown = roomState.countdown - 1

        if (newCountdown <= 3 && newCountdown > 0) hapticFeedback.impact("heavy")

        if (newCountdown === 0) {
          // –∑–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
          const randomRotation = 5400 + Math.random() * 1440
          setRotation((prev) => prev + randomRotation)
          hapticFeedback.impact("heavy")
          await updateRoomState(defaultRoomId, { status: "spinning", countdown: 0 })
          // –¥–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        } else {
          await updateRoomState(defaultRoomId, { countdown: newCountdown })
        }
      }, 1000)
    } else if (countdownIntervalRef.current) {
      clearInterval(countdownIntervalRef.current)
      countdownIntervalRef.current = null
    }

    return () => {
      if (countdownIntervalRef.current) {
        clearInterval(countdownIntervalRef.current)
        countdownIntervalRef.current = null
      }
    }
  }, [roomState, playersInRoom, hapticFeedback])

  const handleAddPlayer = useCallback(
    async (isGift = true, tonAmountToAdd?: number) => {
      try {
        if (!user || !roomState || !supabase) {
          console.error("handleAddPlayer: User, roomState or Supabase client is null", { user, roomState, supabase })
          showAlert("AddPlayer: Missing user, room, or supabase.") // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }

        if (roomState.status === "countdown" && roomState.countdown <= 3) {
          console.error("handleAddPlayer: Cannot add player during final countdown.")
          showAlert("AddPlayer: Cannot add during countdown.") // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }
        if (roomState.status === "spinning" || roomState.status === "finished") {
          console.error("handleAddPlayer: Cannot add player during spinning or finished state.")
          showAlert("AddPlayer: Cannot add during spin/finish.") // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }

        const existingParticipant = playersInRoom.find((p) => p.telegramId === user.id && p.isParticipant)
        if (existingParticipant) {
          hapticFeedback.notification("error")
          console.error("handleAddPlayer: User is already a participant.")
          showAlert("AddPlayer: User already participant.") // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }

        const tonValue = isGift ? Math.random() * 20 + 5 : tonAmountToAdd!
        const newPlayer = createPlayerObject(user, true, tonValue, playersInRoom.filter((p) => p.isParticipant).length)

        hapticFeedback.impact("medium")

        // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ Server Action
        const { player, error } = await addPlayerToRoom(roomState.id, newPlayer)

        if (error) {
          console.error("handleAddPlayer: Error adding player via Server Action:", error)
          showAlert(`AddPlayer SA error: ${error}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }
        if (!player) {
          console.error("handleAddPlayer: Server Action returned null player.")
          showAlert("AddPlayer SA returned null.") // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        const updatedParticipants = [...playersInRoom.filter((p) => p.isParticipant), player].filter(
          Boolean,
        ) as Player[]
        const newTotalTon = updatedParticipants.reduce((sum, p) => sum + p.tonValue, 0)
        const newTotalGifts = updatedParticipants.length
        const newStatus = newTotalGifts === 1 ? "single_player" : newTotalGifts >= 2 ? "countdown" : "waiting"

        await updateRoomState(roomState.id, {
          total_gifts: newTotalGifts,
          total_ton: newTotalTon,
          status: newStatus,
          countdown: newStatus === "countdown" ? 20 : roomState.countdown,
        })
      } catch (error: any) {
        console.error("Exception in handleAddPlayer:", error)
        showAlert(`Exception in AddPlayer: ${error.message}`) // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      }
    },
    [user, roomState, playersInRoom, hapticFeedback, supabase, showAlert], // –î–æ–±–∞–≤–ª—è–µ–º showAlert –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  )

  const getWheelSegments = () => {
    const participants = playersInRoom.filter((p) => p.isParticipant)
    if (participants.length === 0) return []

    let currentAngle = 0
    return participants.map((player) => {
      const segmentAngle = (player.percentage / 100) * 360
      const segment = {
        player,
        startAngle: currentAngle,
        endAngle: currentAngle + segmentAngle,
        angle: segmentAngle,
      }
      currentAngle += segmentAngle
      return segment
    })
  }

  const segments = getWheelSegments()
  const participants = playersInRoom.filter((p) => p.isParticipant)

  const tonButtonFontSizeClass = displayedTonAmount >= 10 ? "text-xs" : "text-base"

  const formatGiftsText = (count: number) => {
    if (count === 0) return "0 –ø–æ–¥–∞—Ä–∫–æ–≤"
    if (count === 1) return "1 –ø–æ–¥–∞—Ä–æ–∫"
    if (count >= 2 && count <= 4) return `${count} –ø–æ–¥–∞—Ä–∫–∞`
    return `${count} –ø–æ–¥–∞—Ä–∫–æ–≤`
  }

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–¥–∞–ª–µ –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    if (showPlayersModal) {
      document.body.style.overflow = "hidden"
    } else {
      document.body.style.overflow = ""
    }
    return () => {
      document.body.style.overflow = "" // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    }
  }, [showPlayersModal])

  // –ï—Å–ª–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (local preview) ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π UI –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
  if (!supabase) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black text-white">
        <p>Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ Vercel.</p>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ Telegram –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞
  if (!isReady || !roomState) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-black text-white flex items-center justify-center">
        <div className="text-center">
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  // ** rest of code here **
}
