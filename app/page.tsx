import { Card } from "@/components/ui/card"
import { AlertCircle } from "lucide-react"
import { getOrCreateRoom, getPlayersInRoom, getParticipants } from "@/app/actions"
import type { Player } from "@/types/player"
import RouletteGameClient from "@/components/roulette-game-client" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

interface RoomState {
  id: string
  status: "waiting" | "single_player" | "countdown" | "spinning" | "finished"
  countdown: number // –≠—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª—å–∑—É countdown_end_time –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  countdown_end_time: string | null // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  winner_telegram_id: number | null
  total_gifts: number
  total_ton: number
}

const items = [
  { icon: "üíù", label: "PvP" },
  { icon: "üîî", label: "Rolls" },
  { icon: "üë§", label: "–ú–æ–∏ –≥–∏—Ñ—Ç—ã" },
  { icon: "üè™", label: "–ú–∞–≥–∞–∑–∏–Ω" },
  { icon: "‚ö°", label: "–ó–∞—Ä–∞–±–æ—Ç–æ–∫" },
]

export default async function HomePage() {
  const defaultRoomId = "default-room-id"
  let initialRoomState: RoomState | null = null
  let initialPlayersInRoom: Player[] = []
  let initialParticipantsForGame: Player[] = []
  let error: string | null = null

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase URL –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  if (!supabaseUrl || !supabaseAnonKey) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black text-white p-4">
        <Card className="bg-gray-900 border-gray-700 p-6 text-center">
          <AlertCircle className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold mb-2">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
          <p className="text-gray-400">
            Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è `NEXT_PUBLIC_SUPABASE_URL` –∏
            `NEXT_PUBLIC_SUPABASE_ANON_KEY` –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ Vercel.
          </p>
        </Card>
      </div>
    )
  }

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é Server Actions
    const { room, error: roomError } = await getOrCreateRoom(defaultRoomId)
    if (roomError) {
      error = roomError
    } else {
      initialRoomState = room as RoomState
    }

    if (initialRoomState) {
      const [playersResult, participantsResult] = await Promise.all([
        getPlayersInRoom(defaultRoomId),
        getParticipants(defaultRoomId),
      ])

      if (playersResult.error) {
        error = playersResult.error
      } else {
        initialPlayersInRoom = playersResult.players
      }

      if (participantsResult.error) {
        error = participantsResult.error
      } else {
        initialParticipantsForGame = participantsResult.participants
      }
    }
  } catch (e: any) {
    console.error("Error fetching initial data in Server Component:", e)
    error = e.message
  }

  // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  return (
    <RouletteGameClient
      initialRoomState={initialRoomState}
      initialPlayersInRoom={initialPlayersInRoom}
      initialParticipantsForGame={initialParticipantsForGame}
      initialError={error}
      defaultRoomId={defaultRoomId}
    />
  )
}
